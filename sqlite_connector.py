import sqlalchemy
import sqlalchemy.orm
import typing


class Base(sqlalchemy.orm.DeclarativeBase):
        pass


class DeployedVersionStatus(Base):
    __tablename__ = "deployed_version_status"
    auto_id: sqlalchemy.orm.Mapped[int] = sqlalchemy.orm.mapped_column(primary_key=True, autoincrement=True)
    version: sqlalchemy.orm.Mapped[str] = sqlalchemy.orm.mapped_column()
    os: sqlalchemy.orm.Mapped[str] = sqlalchemy.orm.mapped_column()
    support_level: sqlalchemy.orm.Mapped[str] = sqlalchemy.orm.mapped_column()


class EOL(Base):
    __tablename__ = "eol"
    auto_id: sqlalchemy.orm.Mapped[int] = sqlalchemy.orm.mapped_column(primary_key=True, autoincrement=True)
    os: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    release: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enter_standard: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enter_extended: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enter_eol: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    current_level: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Policy(Base):
    __tablename__ = "policy"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    packageName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enforcementLevel: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    disconnectedEnforcementLevel: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    helpDeskUrl: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    imageUrl: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    readOnly: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hidden: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    automatic: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    loadAgentInSafeMode: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    reputationEnabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrackingEnabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customLogo: sqlalchemy.orm.Mapped[typing.Optional[bool]] = sqlalchemy.orm.mapped_column()
    automaticApprovalsOnTransition: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    allowAgentUpgrades: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    totalComputers: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    connectedComputers: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    atEnforcementComputers: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersionMax: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Publisher(Base):
    __tablename__ = "publisher"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    publisherReputation: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    publisherState: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyIds: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    reputationApprovalsEnabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    sourceType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    firstSeenComputerId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    signedFilesCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    signedCertificateCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hidden: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    acknowledgedByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateAcknowledged: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    firstSeenPlatformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    acknowledged: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stateSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Agent_Config(Base):
    __tablename__ = "agent_config"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hidden: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Serverconfig(Base):
    __tablename__ = "serverConfig"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    version: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    readOnly: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Cache_Checks(Base):
    __tablename__ = "cache_checks"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Td_Approval_Counts(Base):
    __tablename__ = "td_approval_counts"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Unapprovedwriters(Base):
    __tablename__ = "unapprovedWriters"
    RowNum: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_fileExtension: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_md5: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_sha1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_sha256HashType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_fileType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_fileSize: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_productName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_publisher: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_company: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_publisherOrCompany: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_productVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_trust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_effectiveState: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_publisherState: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_approvedByReputation: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_reputationEnabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_reputationAvailable: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_trustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_threat: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_category: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_prevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_fileState: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_fileFlags: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_installedProgramName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_verdict: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_publisherId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_certificateId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_certificateState: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_acknowledged: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_stateSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_nodeType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_transactionId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_globalStateDetails: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId_initialized: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Updater(Base):
    __tablename__ = "updater"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    version: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Apptemplate(Base):
    __tablename__ = "appTemplate"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    purpose: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    version: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformFlags: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateUpgraded: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    autoDetectType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    autoDetectDesc: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    appCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    configured: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    autoDetection: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyIds: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    layout: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    defaultSettings: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    settingsList: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    importFile: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    autoDetectByPolcyList: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    action: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Trusteddirectory(Base):
    __tablename__ = "trustedDirectory"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    directoryPath: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    totalItems: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    accessible: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    completedItems: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[bool]] = sqlalchemy.orm.mapped_column()
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyIds: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Rapfig_Events(Base):
    __tablename__ = "rapfig_events"
    auto_id: sqlalchemy.orm.Mapped[int] = sqlalchemy.orm.mapped_column(primary_key=True, autoincrement=True)
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    subcount: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    dcount: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Console_Logins(Base):
    __tablename__ = "console_logins"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Scriptrule(Base):
    __tablename__ = "scriptRule"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pattern: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hidden: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rescanComputers: sqlalchemy.orm.Mapped[typing.Optional[bool]] = sqlalchemy.orm.mapped_column()
    definitionType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Extensions(Base):
    __tablename__ = "extensions"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Block_Events(Base):
    __tablename__ = "block_events"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Computer(Base):
    __tablename__ = "computer"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    previousPolicyId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    users: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    connected: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enforcementLevel: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    disconnectedEnforcementLevel: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osShortName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    lastPollDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    automaticPolicy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    localApproval: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    prioritized: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    daysOffline: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    uninstalled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    syncPercent: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    initPercent: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hasDuplicates: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    isActive: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    deleted: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processorCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    CLIPassword: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    machineModel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processorSpeed: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processorModel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    memorySize: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    upgradeError: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    upgradeStatus: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    syncFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    refreshFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    template: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateComputerId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    virtualized: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    virtualPlatform: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    macAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    debugLevel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    kernelDebugLevel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    debugFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    activeDebugLevel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    activeKernelDebugLevel: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    activeDebugFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    debugDuration: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ccLevel: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ccFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    supportedKernel: sqlalchemy.orm.Mapped[typing.Optional[bool]] = sqlalchemy.orm.mapped_column()
    hasHealthCheckErrors: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    lastRegisterDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyStatus: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyStatusDetails: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    upgradeErrorCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    upgradeErrorTime: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentMemoryDumps: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    systemMemoryDumps: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    initializing: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    tamperProtectionActive: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentCacheSize: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentQueueSize: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    forceUpgrade: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    tdCount: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateCloneCleanupMode: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateCloneCleanupTime: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateCloneCleanupTimeScale: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    templateTrackModsOnly: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    cbSensorVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    cbSensorFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    cbSensorId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    SCEPStatus: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Rule_Hits(Base):
    __tablename__ = "rule_hits"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Global_Approval_Counts_2(Base):
    __tablename__ = "global_approval_counts_2"
    dateFrom: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    dateTo: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Customrule(Base):
    __tablename__ = "customRule"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    masterRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleGroupId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleUITemplateId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleAction: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathPattern: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPattern: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    restrictAccessFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    writeActionMask: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    writeNegationMask: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    writeOpType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    execActionMask: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    combinedActionMask: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    execNegationMask: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    execOpType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    combinedOpType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    minAgentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    maxAgentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyIds: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    hidden: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateModified: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    sid: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    idUnique: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userNames: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rank: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    execNotifierId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    writeNotifierId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    effectiveNotifierId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    negatedProcessFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleClassId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileState: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processNegatedFileFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processDeviceType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processClassification: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPublisherName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetFileState: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetFileFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetNegatedFileFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetDeviceType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetClassification: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetPublisherName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    minPlatform: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    maxPlatform: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    classifier: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    objectType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    enforcementFlags: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    readOnly: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createdByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    createdBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifiedByUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    modifiedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    importedByUserId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    importedBy: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    importSessionHandle: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    platformFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    priority: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    priorityBucket: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    priorityGroup: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    dateImported: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    unifiedFlag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    origIdUnique: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    version: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Serverperformance(Base):
    __tablename__ = "serverPerformance"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    dateCreated: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    connectedAgents: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    agentFileBacklog: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentProcessingRate: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    serverFileBacklog: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    serverProcessingRate: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    serverFiles: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskDataWrite: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskDataRead: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskIndexWrite: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskIndexRead: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskLogWrite: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    diskDataIOPS: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    diskIndexIOPS: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    diskLogIOPS: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    avgDiskLogWriteStallMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    avgDiskDataWriteStallMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    avgDiskIndexWriteStallMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    avgDiskDataReadStallMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    avgDiskIndexReadStallMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    sqlMemoryPressure: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    sqlLatencyMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    sqlInsertLatencyMs: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()


class Global_Approval_Counts(Base):
    __tablename__ = "global_approval_counts"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Oldest_Event(Base):
    __tablename__ = "oldest_event"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Event_Count_30D(Base):
    __tablename__ = "event_count_30d"
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)


class Policy_Changes(Base):
    __tablename__ = "policy_changes"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    computerId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileCatalogId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    timestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    receivedTimestamp: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileFirstExecutionDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    severity: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    type: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtype: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    subtypeName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ipAddress: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    userName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    ruleName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    banName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    updaterName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rapfigName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    indicatorSetName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    commandLine: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processKey: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    process: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installerFileName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param1: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param2: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    param3: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    policyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    policyName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    stringId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    unifiedSource: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    clVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    eventRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    customRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileRuleId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    installEventId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    pathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPathNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileNameId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    sha256: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerPolicyId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    platformId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    installerHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processHash: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    computerTag: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    osName: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    agentVersion: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    fileTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    fileThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    filePrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processTrust: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    processTrustMessages: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processThreat: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    processPrevalence: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()


class Approval_Summary(Base):
    __tablename__ = "approval_summary"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Top_Processes(Base):
    __tablename__ = "top_processes"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Top_Subtypes(Base):
    __tablename__ = "top_subtypes"
    value: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column(primary_key=True)
    count: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()


class Driftreport(Base):
    __tablename__ = "driftReport"
    id: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column(primary_key=True)
    name: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    description: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    modifyDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    generateStartDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    generateEndDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    lastGenerateStepDate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    durationSec: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    driftTimeInterval: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    driftTimeIntervalType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    createUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    modifyUserId: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    reportType: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    baselineType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    targetType: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    baselineId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    snapshotId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetId: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    baselineFilter: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    finalBaselineFilter: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    targetFilter: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    finalTargetFilter: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    generateFlags: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    enabled: sqlalchemy.orm.Mapped[typing.Optional[bool]] = sqlalchemy.orm.mapped_column()
    deleted: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    regenerate: sqlalchemy.orm.Mapped[typing.Optional[str]] = sqlalchemy.orm.mapped_column()
    rDrift: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()
    wDrift: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    sDrift: sqlalchemy.orm.Mapped[typing.Optional[float]] = sqlalchemy.orm.mapped_column()
    percentageDone: sqlalchemy.orm.Mapped[typing.Optional[int]] = sqlalchemy.orm.mapped_column()

class sqlite_db(object):
    def __init__(self, filename):
        self.engine = self._get_engine(filename)

    def _get_engine(self, filename):
        engine = sqlalchemy.create_engine(f"sqlite+pysqlite:///./{filename}", echo=False)
        engine.connect()
        Base.metadata.create_all(engine)
        return engine

    def insert_data(self, table, data):
        CHUNKS = 1
        with sqlalchemy.orm.Session(self.engine) as session:
            table = Base.metadata.tables[table]
            for x in range(0, len(data), CHUNKS):
                insert = sqlalchemy.insert(table)
                if x + CHUNKS <= len(data):
                    insert = insert.values(data[x:x+CHUNKS])
                else:
                    insert = insert.values(data[x:len(data)])
                session.execute(insert)
                session.commit()

    def query_data(self, query):
        with sqlalchemy.orm.Session(self.engine) as session:
            stmt = sqlalchemy.sql.text(query)
            result = session.execute(stmt, {"x":1}).fetchall()
            result = [list(i) for i in result]
        return result

    def delete_data(self, table):
        if table in Base.metadata.tables:
            table = Base.metadata.tables[table]
            with sqlalchemy.orm.Session(self.engine) as session:
                num_rows_deleted = session.query(table).delete()
                session.commit()


if __name__ == "__main__":
    db = sqlite_db("ac_exec_report.db")
    data = db.query_data("select * from computer")
    delete = db.delete_data("computer")

